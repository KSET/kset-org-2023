generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthGroup {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(80)

  groupPermissions AuthGroupPermission[]

  userGroups AuthUserGroup[]

  grappelliNavigationItemGroups GrappelliNavigationItemGroup[]

  guardianGroupObjectPermission GuardianGroupObjectPermission[]

  @@map("auth_group")
}

model AuthGroupPermission {
  id Int @id @default(autoincrement())

  groupId Int       @map("group_id")
  group   AuthGroup @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  permissionId Int            @map("permission_id")
  permission   AuthPermission @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([groupId, permissionId], map: "auth_group_permissions_group_id_key")
  @@map("auth_group_permissions")
}

model AuthMessage {
  id      Int    @id @default(autoincrement())
  message String

  userId Int      @map("user_id")
  user   AuthUser @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId], map: "auth_message_user_id")
  @@map("auth_message")
}

model AuthPermission {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(50)
  codename String @db.VarChar(100)

  authGroupPermissions AuthGroupPermission[]

  contentTypeId Int               @map("content_type_id")
  contentType   DjangoContentType @relation(fields: [contentTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "content_type_id_refs_id_728de91f")

  authUserUserPermissions AuthUserUserPermission[]

  guardianGroupObjectPermissions GuardianGroupObjectPermission[]

  guardianUserObjectPermissions GuardianUserObjectPermission[]

  @@unique([contentTypeId, codename], map: "auth_permission_content_type_id_key")
  @@index([contentTypeId], map: "auth_permission_content_type_id")
  @@map("auth_permission")
}

model AuthUser {
  id          Int      @id @default(autoincrement())
  username    String   @unique @db.VarChar(30)
  firstName   String   @map("first_name") @db.VarChar(30)
  lastName    String   @map("last_name") @db.VarChar(30)
  email       String   @db.VarChar(75)
  password    String   @db.VarChar(128)
  isStaff     Boolean  @map("is_staff")
  isActive    Boolean  @map("is_active")
  isSuperuser Boolean  @map("is_superuser")
  lastLogin   DateTime @map("last_login") @db.Timestamptz(6)
  dateJoined  DateTime @map("date_joined") @db.Timestamptz(6)

  authMessages AuthMessage[]

  userGroups AuthUserGroup[]

  authUserUserPermissions AuthUserUserPermission[]

  djangoAdminLogs DjangoAdminLog[]

  events ClubEvent[]

  grappelliBookmarks GrappelliBookmark[]

  grappelliNavigationItemUsers GrappelliNavigationItemUser[]

  guardianUserObjectPermissions GuardianUserObjectPermission[]

  savjetZapisniks SavjetZapisnik[]

  @@map("auth_user")
}

model AuthUserGroup {
  id Int @id @default(autoincrement())

  groupId Int       @map("group_id")
  group   AuthGroup @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userId Int      @map("user_id")
  user   AuthUser @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, groupId], map: "auth_user_groups_user_id_key")
  @@map("auth_user_groups")
}

model AuthUserUserPermission {
  id Int @id @default(autoincrement())

  permissionId Int            @map("permission_id")
  permission   AuthPermission @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userId Int      @map("user_id")
  user   AuthUser @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, permissionId], map: "auth_user_user_permissions_user_id_key")
  @@map("auth_user_user_permissions")
}

model DjangoAdminLog {
  id            Int      @id @default(autoincrement())
  actionTime    DateTime @map("action_time") @db.Timestamptz(6)
  objectId      String?  @map("object_id")
  objectRepr    String   @map("object_repr") @db.VarChar(200)
  actionFlag    Int      @map("action_flag") @db.SmallInt
  changeMessage String   @map("change_message")

  contentTypeId Int?               @map("content_type_id")
  contentType   DjangoContentType? @relation(fields: [contentTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userId Int      @map("user_id")
  user   AuthUser @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([contentTypeId], map: "django_admin_log_content_type_id")
  @@index([userId], map: "django_admin_log_user_id")
  @@map("django_admin_log")
}

model DjangoContentType {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(100)
  appLabel String @map("app_label") @db.VarChar(100)
  model    String @db.VarChar(100)

  permissions AuthPermission[]

  djangoAdminLogs DjangoAdminLog[]

  guardianGroupObjectPermissions GuardianGroupObjectPermission[]

  guardianUserObjectPermissions GuardianUserObjectPermission[]

  taggingTaggedItem TaggingTaggedItem[]

  @@unique([appLabel, model], map: "django_content_type_app_label_key")
  @@map("django_content_type")
}

model DjangoFlatpage {
  id                   Int     @id @default(autoincrement())
  url                  String  @db.VarChar(100)
  title                String  @db.VarChar(200)
  content              String
  enableComments       Boolean @map("enable_comments")
  templateName         String  @map("template_name") @db.VarChar(70)
  registrationRequired Boolean @map("registration_required")

  flatpageSites DjangoFlatpageSite[]

  @@index([url], map: "django_flatpage_url")
  @@index([url], map: "django_flatpage_url_like")
  @@map("django_flatpage")
}

model DjangoFlatpageSite {
  id Int @id @default(autoincrement())

  siteId Int        @map("site_id")
  site   DjangoSite @relation(fields: [siteId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  flatpageId Int            @map("flatpage_id")
  flatpage   DjangoFlatpage @relation(fields: [flatpageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "flatpage_id_refs_id_c0e84f5a")

  @@unique([flatpageId, siteId], map: "django_flatpage_sites_flatpage_id_key")
  @@index([flatpageId], map: "django_flatpage_sites_flatpage_id")
  @@index([siteId], map: "django_flatpage_sites_site_id")
  @@map("django_flatpage_sites")
}

model DjangoSession {
  sessionKey  String   @id @map("session_key") @db.VarChar(40)
  sessionData String   @map("session_data")
  expireDate  DateTime @map("expire_date") @db.Timestamptz(6)

  @@map("django_session")
}

model DjangoSite {
  id     Int    @id @default(autoincrement())
  domain String @db.VarChar(100)
  name   String @db.VarChar(50)

  flatpageSites DjangoFlatpageSite[]

  @@map("django_site")
}

model ClubEvent {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(192)
  date        DateTime  @db.Date
  time        DateTime? @db.Time(6)
  description String?
  content     String?
  price       String?   @db.VarChar(16)
  thumb       String?   @db.VarChar(255)
  slug        String?   @db.VarChar(128)
  announce    Boolean?
  daytime     Boolean?  @default(false)
  tags        String[]
  fbEventId   String?   @map("fbeventid") @db.VarChar(25)

  authorId Int?      @map("author_id")
  author   AuthUser? @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "author_id_refs_id_8795bcdc")

  @@index([authorId], map: "events_event_author_id")
  @@map("events_event")
}

model GalleryAlbum {
  id           Int      @id @default(autoincrement())
  uploadPath   String?  @map("upload_path") @db.VarChar(255)
  title        String   @db.VarChar(255)
  slug         String   @db.VarChar(50)
  description  String   @db.VarChar(255)
  dateOfEvent  DateTime @map("date_of_event") @db.Date
  dateOfUpload DateTime @map("date_of_upload") @db.Timestamptz(6)
  initial      Boolean
  thumb        String   @db.VarChar(255)
  category     String   @db.VarChar(25)

  photographerId Int?                 @default(1) @map("photographer_id")
  photographer   GalleryPhotographer? @relation(fields: [photographerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_photographer_id")

  galleryImageAlbum GalleryImageAlbum[]

  @@index([slug], map: "gallery_album_slug")
  @@index([slug], map: "gallery_album_slug_like")
  @@map("gallery_album")
}

model GalleryImage {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  slug         String   @db.VarChar(255)
  caption      String?  @db.VarChar(255)
  dateOfEvent  DateTime @map("date_of_event") @db.Date
  dateOfUpload DateTime @map("date_of_upload") @db.Timestamptz(6)
  uploadPath   String   @map("upload_path") @db.VarChar(255)

  photographerId Int?                 @map("photographer_id")
  photographer   GalleryPhotographer? @relation(fields: [photographerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "photographer_id_refs_id_dbca34de")

  galleryImageAlbum GalleryImageAlbum[]

  @@index([photographerId], map: "gallery_image_photographer_id")
  @@index([slug], map: "gallery_image_slug")
  @@index([slug], map: "gallery_image_slug_like")
  @@map("gallery_image")
}

model GalleryImageAlbum {
  id Int @id @default(autoincrement())

  albumId Int          @map("album_id")
  album   GalleryAlbum @relation(fields: [albumId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_id_refs_id_c27f8e91")

  imageId Int          @map("image_id")
  image   GalleryImage @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "image_id_refs_id_41ea0efd")

  @@unique([imageId, albumId], map: "gallery_image_album_image_id_key")
  @@index([albumId], map: "gallery_image_album_album_id")
  @@index([imageId], map: "gallery_image_album_image_id")
  @@map("gallery_image_album")
}

model GalleryPhotographer {
  id   Int     @id @default(autoincrement())
  name String  @db.VarChar(32)
  url  String? @db.VarChar(255)

  albums GalleryAlbum[]

  images GalleryImage[]

  @@map("gallery_photographer")
}

model GrappelliBookmark {
  id Int @id @default(autoincrement())

  userId Int      @map("user_id")
  user   AuthUser @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  bookmarkItem GrappelliBookmarkItem[]

  @@index([userId], map: "grappelli_bookmark_user_id")
  @@map("grappelli_bookmark")
}

model GrappelliBookmarkItem {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(80)
  link  String @db.VarChar(200)
  order Int

  bookmarkId Int               @map("bookmark_id")
  bookmark   GrappelliBookmark @relation(fields: [bookmarkId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([bookmarkId], map: "grappelli_bookmarkitem_bookmark_id")
  @@map("grappelli_bookmarkitem")
}

model GrappelliHelp {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(50)
  order Int

  helpItem GrappelliHelpItem[]

  @@map("grappelli_help")
}

model GrappelliHelpItem {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(200)
  link  String @db.VarChar(200)
  body  String
  order Int

  helpId Int           @map("help_id")
  help   GrappelliHelp @relation(fields: [helpId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([helpId], map: "grappelli_helpitem_help_id")
  @@map("grappelli_helpitem")
}

model GrappelliNavigation {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(30)
  order Int

  navigationItem GrappelliNavigationItem[]

  @@map("grappelli_navigation")
}

model GrappelliNavigationItem {
  id       Int    @id @default(autoincrement())
  title    String @db.VarChar(30)
  link     String @db.VarChar(200)
  category String @db.VarChar(1)
  order    Int

  navigationId Int                 @map("navigation_id")
  navigation   GrappelliNavigation @relation(fields: [navigationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  navigationItemGroups GrappelliNavigationItemGroup[]

  navigationItemUsers GrappelliNavigationItemUser[]

  @@index([navigationId], map: "grappelli_navigationitem_navigation_id")
  @@map("grappelli_navigationitem")
}

model GrappelliNavigationItemGroup {
  id Int @id @default(autoincrement())

  groupId Int       @map("group_id")
  group   AuthGroup @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  navigationItemId Int                     @map("navigationitem_id")
  navigationItem   GrappelliNavigationItem @relation(fields: [navigationItemId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "navigationitem_id_refs_id_8f2cd403")

  @@unique([navigationItemId, groupId], map: "grappelli_navigationitem_groups_navigationitem_id_key")
  @@index([groupId], map: "grappelli_navigationitem_groups_group_id")
  @@index([navigationItemId], map: "grappelli_navigationitem_groups_navigationitem_id")
  @@map("grappelli_navigationitem_groups")
}

model GrappelliNavigationItemUser {
  id Int @id @default(autoincrement())

  userId Int      @map("user_id")
  user   AuthUser @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  navigationItemId Int                     @map("navigationitem_id")
  navigationItem   GrappelliNavigationItem @relation(fields: [navigationItemId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "navigationitem_id_refs_id_fbdd09fc")

  @@unique([navigationItemId, userId], map: "grappelli_navigationitem_users_navigationitem_id_key")
  @@index([navigationItemId], map: "grappelli_navigationitem_users_navigationitem_id")
  @@index([userId], map: "grappelli_navigationitem_users_user_id")
  @@map("grappelli_navigationitem_users")
}

model GuardianGroupObjectPermission {
  id       Int    @id @default(autoincrement())
  objectPk String @map("object_pk") @db.VarChar(255)

  contentTypeId Int               @map("content_type_id")
  contentType   DjangoContentType @relation(fields: [contentTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  groupId Int       @map("group_id")
  group   AuthGroup @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  permissionId Int            @map("permission_id")
  permission   AuthPermission @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([groupId, permissionId, contentTypeId, objectPk], map: "guardian_groupobjectpermission_group_id_key")
  @@index([contentTypeId], map: "guardian_groupobjectpermission_content_type_id")
  @@index([groupId], map: "guardian_groupobjectpermission_group_id")
  @@index([permissionId], map: "guardian_groupobjectpermission_permission_id")
  @@map("guardian_groupobjectpermission")
}

model GuardianUserObjectPermission {
  id       Int    @id @default(autoincrement())
  objectPk String @map("object_pk") @db.VarChar(255)

  contentTypeId Int               @map("content_type_id")
  contentType   DjangoContentType @relation(fields: [contentTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  permissionId Int            @map("permission_id")
  permission   AuthPermission @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userId Int      @map("user_id")
  user   AuthUser @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, permissionId, contentTypeId, objectPk], map: "guardian_userobjectpermission_user_id_key")
  @@index([contentTypeId], map: "guardian_userobjectpermission_content_type_id")
  @@index([permissionId], map: "guardian_userobjectpermission_permission_id")
  @@index([userId], map: "guardian_userobjectpermission_user_id")
  @@map("guardian_userobjectpermission")
}

model MemberAddress {
  id      Int     @id @default(autoincrement())
  address String  @db.VarChar(64)
  town    String? @db.VarChar(32)
  zipcode String? @db.VarChar(16)
  country String? @db.VarChar(32)

  memberId Int    @map("member_id")
  member   Member @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([memberId], map: "members_address_member_id")
  @@map("members_address")
}

model MemberContact {
  id          Int     @id @default(autoincrement())
  memberId    Int     @map("member_id")
  contact     String  @db.VarChar(64)
  contactType String? @map("contact_type") @db.VarChar(255)
  isPrivate   Boolean @map("is_private")

  @@index([memberId], map: "members_contact_member_id")
  @@map("members_contact")
}

model MemberGroup {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(32)
  slug        String  @db.VarChar(50)
  description String? @db.VarChar(128)

  parentId Int?         @map("parent_id")
  parent   MemberGroup? @relation("members_groupTomembers_group", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "parent_id_refs_id_bf804683")

  children MemberGroup[] @relation("members_groupTomembers_group")

  memberMemberGroupLinks MemberMemberGroupLink[]

  @@index([parentId], map: "members_group_parent_id")
  @@index([slug], map: "members_group_slug")
  @@index([slug], map: "members_group_slug_like")
  @@map("members_group")
}

model MembersImport {
  id       Int     @id(map: "members_import_id_pk") @default(autoincrement())
  ime      String? @db.VarChar(255)
  prezime  String? @db.VarChar(255)
  nadimak  String? @db.VarChar(255)
  email    String? @db.VarChar(255)
  telefon  String? @db.VarChar(255)
  adresa   String? @db.VarChar(255)
  pbr      String? @db.VarChar(255)
  grad     String? @db.VarChar(255)
  drzava   String? @db.VarChar(255)
  adresa2  String? @db.VarChar(255)
  pbr2     String? @db.VarChar(255)
  grad2    String? @db.VarChar(255)
  sekcija  String? @db.VarChar(255)
  crvena   String? @db.VarChar(255)
  period   String? @db.VarChar(255)
  komentar String? @db.VarChar(255)

  @@map("members_import")
}

model Member {
  id                  Int       @id @default(autoincrement())
  cardId              String?   @map("card_id") @db.VarChar(32)
  name                String    @db.VarChar(32)
  surname             String    @db.VarChar(64)
  nickname            String?   @db.VarChar(32)
  username            String    @unique @db.VarChar(32)
  password            String?   @db.VarChar(255)
  birth               DateTime? @db.Date
  death               DateTime? @db.Date
  comment             String?
  image               String?   @db.VarChar(100)
  joinDate            DateTime? @map("join_date") @db.Date
  leaveDate           DateTime? @map("leave_date") @db.Date
  oib                 String?   @db.VarChar(11)
  college             String?   @db.VarChar(100)
  collegeConfirmation Boolean   @map("college_confirmation")
  gender              String?   @db.VarChar(255)
  membershipPaid      Boolean   @map("membership_paid")

  memberAddresses MemberAddress[]

  memberResetPasswordLink MemberResetPasswordLink?

  @@map("members_member")
}

model MemberMemberGroupLink {
  id         Int       @id @default(autoincrement())
  memberId   Int       @map("member_id")
  dateStart  DateTime? @map("date_start") @db.Date
  dateEnd    DateTime? @map("date_end") @db.Date
  cardNumber String?   @map("card_number") @db.VarChar(10)

  groupId Int         @map("group_id")
  group   MemberGroup @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([groupId], map: "members_membergrouplink_group_id")
  @@index([memberId], map: "members_membergrouplink_member_id")
  @@map("members_membergrouplink")
}

model MemberResetPasswordLink {
  id         Int      @id @default(autoincrement())
  uniqueLink String   @unique @map("unique_link") @db.VarChar(255)
  createdAt  DateTime @map("created_at") @db.Timestamptz(6)

  memberId Int    @unique @map("member_id")
  member   Member @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "member_id_refs_id_3304e2d0")

  @@index([uniqueLink], map: "members_resetpasswordlink_unique_link_like")
  @@map("members_resetpasswordlink")
}

model ClubNews {
  id          Int       @id @default(autoincrement())
  subject     String    @db.VarChar(192)
  description String?
  content     String?
  createdAt   DateTime  @map("created_at") @db.Timestamptz(6)
  thumb       String?   @db.VarChar(255)
  slug        String?   @db.VarChar(128)
  sticky      Boolean?  @default(false)
  expiresAt   DateTime? @map("expire_at") @db.Timestamp(6)

  @@map("news_news")
}

model NewsletterSubscription {
  id    Int    @id @default(autoincrement())
  email String @unique @db.VarChar(75)

  @@map("newsletter_subscription")
}

model SavjetDezurstva {
  id      Int      @id @default(autoincrement())
  start   DateTime @db.Date
  end     DateTime @db.Date
  content String

  @@map("savjet_dezurstva")
}

model SavjetZapisnik {
  id      Int      @id @default(autoincrement())
  date    DateTime @db.Timestamptz(6)
  title   String   @db.VarChar(100)
  content String?

  authorId Int?      @map("author_id")
  author   AuthUser? @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "author_id_refs_id_25a8e88d")

  @@index([authorId], map: "savjet_zapisnik_author_id")
  @@map("savjet_zapisnik")
}

model SouthMigrationHistory {
  id        Int      @id @default(autoincrement())
  appName   String   @map("app_name") @db.VarChar(255)
  migration String   @db.VarChar(255)
  applied   DateTime @db.Timestamptz(6)

  @@map("south_migrationhistory")
}

model TaggingTag {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)

  items TaggingTaggedItem[]

  @@map("tagging_tag")
}

model TaggingTaggedItem {
  id       Int @id @default(autoincrement())
  objectId Int @map("object_id")

  contentTypeId Int               @map("content_type_id")
  contentType   DjangoContentType @relation(fields: [contentTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  tagId Int        @map("tag_id")
  tag   TaggingTag @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([tagId, contentTypeId, objectId], map: "tagging_taggeditem_tag_id_key")
  @@index([contentTypeId], map: "tagging_taggeditem_content_type_id")
  @@index([objectId], map: "tagging_taggeditem_object_id")
  @@index([tagId], map: "tagging_taggeditem_tag_id")
  @@map("tagging_taggeditem")
}

model ThumbnailKvStore {
  key   String @id @db.VarChar(200)
  value String

  @@index([key], map: "thumbnail_kvstore_key_like")
  @@map("thumbnail_kvstore")
}
